Activity Meeting

1/3/2018

Start Time: 3:15:47 AM

Location :Canteen, Prime College

Agenda 1:
JavaScript objects are dynamic "bags" of properties (referred to as own properties). JavaScript objects have a link to a prototype object. When trying to access a property of an object, the property will not only be sought on the object but on the prototype of the object, the prototype of the prototype, and so on until either a property with a matching name is found or the end of the prototype chain is reached.

Agenda 2:
It should not be confused with the property of functions, which instead specifies the [[Prototype]] to be assigned to all instances of objects created by the given function when used as a constructor. The Object.prototype property represents the Object prototype object.

Agenda 3:
JavaScript does not have "methods" in the form that class-based languages define them. In JavaScript, any function can be added to an object in the form of a property. An inherited function acts just as any other property, including property shadowing as shown above (in this case, a form of method overriding).

Agenda 4:
That's actually it!!
Conclusion :
The lookup time for properties that are high up on the prototype chain can have a negative impact on the performance, and this may be significant in the code where performance is critical. Additionally, trying to access nonexistent properties will always traverse the full prototype chain.

Also, when iterating over the properties of an object, every enumerable property that is on the prototype chain will be enumerated. To check whether an object has a property defined on itself and not somewhere on its prototype chain, it is necessary to use the has Own Property method which all objects inherit from Object.prototype. To give you a concrete example, let's take the above graph example code to illustrate it:

Attendees :

Jikesh Thapa
Sumit Shakya
Ursula Manandhar
Nitesh Shrestha
Prabin Dhungana
Baburam Bohora
Bipin Shrestha


End Time :3:16:02 AM